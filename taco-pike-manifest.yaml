---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: helm-toolkit
data:
  chart_name: helm-toolkit
  release: helm-toolkit
  namespace: helm-tookit
  values: {}
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: helm-toolkit
    reference: 2.2.0
  dependencies: []
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ceph
data:
  chart_name: ceph
  release: ceph
  namespace: ceph
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-ceph
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - type: job 
          labels:
            application: ceph
            component: bootstrap
        - type: job 
          labels:
            application: ceph
            component: cephfs-client-key-generator
        - type: job 
          labels:
            application: ceph
            component: mds-keyring-generator
        - type: job 
          labels:
            application: ceph
            component: osd-keyring-generator
        - type: job 
          labels:
            application: ceph
            component: rgw-keyring-generator
        - type: job 
          labels:
            application: ceph
            component: mon-keyring-generator
        - type: job 
          labels:
            application: ceph
            component: mgr-keyring-generator
        - type: job 
          labels:
            application: ceph
            component: rbd-pool
        - type: job 
          labels:
            application: ceph
            component: storage-keys-generator
  values:
    endpoints:
      identity:
        namespace: openstack
      object_store:
        namespace: ceph
      ceph_mon:
        namespace: ceph
    network:
      public: 0.0.0.0/24
      cluster: 0.0.0.0/24
    deployment:
      storage_secrets: true
      ceph: true
      rbd_provisioner: true
      cephfs_provisioner: true
      client_secrets: false
      rgw_keystone_user_and_endpoints: false
    bootstrap:
      enabled: true
    conf:
      rgw_ks:
        enabled: true
      ceph:
        global:
          fsid: null
          osd_pool_default_size: 1
        osd:
          osd_crush_chooseleaf_type: 0
      pool:
        crush:
          tunables: null
        target:
          osd: 1
          pg_per_osd: 100
        default:
          crush_rule: same_host
        spec:
          # RBD pool
          - name: rbd
            application: rbd
            replication: 1
            percent_total_data: 40
          # CephFS pools
          - name: cephfs_metadata
            application: cephfs
            replication: 1
            percent_total_data: 5
          - name: cephfs_data
            application: cephfs
            replication: 1
            percent_total_data: 10
          # RadosGW pools
          - name: .rgw.root
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.control
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.data.root
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.gc
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.log
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.intent-log
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.meta
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.usage
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.users.keys
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.users.email
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.users.swift
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.users.uid
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.buckets.extra
            application: rgw
            replication: 1
            percent_total_data: 0.1
          - name: default.rgw.buckets.index
            application: rgw
            replication: 1
            percent_total_data: 3
          - name: default.rgw.buckets.data
            application: rgw
            replication: 1
            percent_total_data: 34.8
      storage:
        osd:
          - data:
              type: directory
              location: /var/lib/openstack-helm/ceph/osd/osd-one
            journal:
              type: directory
              location: /var/lib/openstack-helm/ceph/osd/journal-one
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: ceph
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ceph-openstack-config
data:
  chart_name: ceph-openstack-config
  release: ceph-openstack-config
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-ceph-openstack-config
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    endpoints:
      identity:
        namespace: "openstack"
      object_store:
        namespace: "ceph"
      ceph_mon:
        namespace: "ceph"
    ceph:
      enabled:
        mds: false
    deployment:
      storage_secrets: false
      ceph: false
      rbd_provisioner: false
      cephfs_provisioner: false
      client_secrets: true
      rgw_keystone_user_and_endpoints: false
    bootstrap:
      enabled: false
    storageclass:
      provision_storage_class: false
    manifests:
      daemonset_mon: false
      deployment_rgw: false
      deployment_moncheck: false
      deployment_rbd_provisioner: false
      deployment_cephfs_provisioner: false
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: ceph
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: mariadb
data:
  chart_name: mariadb
  release: mariadb
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-mariadb
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    pod:
      replicas:
        server: 1
    volume:
      enabled: false
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: mariadb
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ingress
data:
  chart_name: ingress
  release: ingress
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-ingress
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    config:
      worker-processes: "8"
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: ingress
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: etcd
data:
  chart_name: etcd
  release: etcd
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-etcd
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    pod:
      replicas:
        etcd: 1
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: etcd
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: rabbitmq
data:
  chart_name: rabbitmq
  release: rabbitmq
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-rabbitmq
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    volume:
      enabled: false
    pod:
      replicas:
        server: 1
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: rabbitmq
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: memcached
data:
  chart_name: memcached
  release: memcached
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-memcached
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    pod:
      replicas:
        server: 1
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: memcached
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: libvirt
data:
  chart_name: libvirt
  release: libvirt
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-libvirt
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        libvirt: docker.io/kolla/ubuntu-source-nova-libvirt:pike
      pull_policy: Always
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: libvirt
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: openvswitch
data:
  chart_name: openvswitch
  release: openvswitch
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-openvswitch
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        openvswitch_db_server: docker.io/kolla/ubuntu-source-openvswitch-db-server:pike
        openvswitch_vswitchd: docker.io/kolla/ubuntu-source-openvswitch-vswitchd:pike
      pull_policy: Always
    network:
      external_bridge: br-ex
      interface:
        external: null
      auto_bridge_add: {}
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: openvswitch
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: keystone
data:
  chart_name: keystone
  release: keystone
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-keystone
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: keystone-bootstrap
          type: job
          labels:
            application: keystone
            component: bootstrap
        - name: keystone-credential-setup
          type: job
          labels:
            application: keystone
            component: credential-setup
        - name: keystone-db-init
          type: job
          labels:
            application: keystone
            component: db-init
        - name: keystone-db-sync
          type: job
          labels:
            application: keystone
            component: db-sync
        - name: keystone-fernet-setup
          type: job
          labels:
            application: keystone
            component: fernet-setup
  values:
    images:
      tags:
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
        test: docker.io/kolla/ubuntu-source-rally:pike
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        keystone_db_sync: docker.io/kolla/ubuntu-source-keystone:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-heat-engine:pike
        keystone_fernet_setup: docker.io/kolla/ubuntu-source-keystone:pike
        keystone_fernet_rotate: docker.io/kolla/ubuntu-source-keystone:pike
        keystone_credential_setup: docker.io/kolla/ubuntu-source-keystone:pike
        keystone_credential_rotate: docker.io/kolla/ubuntu-source-keystone:pike
        keystone_api: docker.io/kolla/ubuntu-source-keystone:pike
        keystone_domain_manage: docker.io/kolla/ubuntu-source-keystone:pike
    conf:
      keystone:
        DEFAULT:
          debug: true
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: keystone
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: glance
data:
  chart_name: glance
  release: glance
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-glance
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: glance-bootstrap
          type: job
          labels:
            application: glance
            component: bootstrap
        - name: glance-storage-init
          type: job
          labels:
            application: glance
            component: storage-init
        - name: glance-db-init
          type: job
          labels:
            application: glance
            component: db-init
        - name: glance-db-sync
          type: job
          labels:
            application: glance
            component: db-sync
        - name: glance-ks-endpoints
          type: job
          labels:
            application: glance
            component: ks-endpoints
        - name: glance-ks-service
          type: job
          labels:
            application: glance
            component: ks-service
        - name: glance-ks-user
          type: job
          labels:
            application: glance
            component: ks-user
  values:
    storage: pvc
    images:
      tags:
        test: docker.io/kolla/ubuntu-source-rally:pike
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        glance_db_sync: docker.io/kolla/ubuntu-source-glance-api:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_service: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_endpoints: docker.io/kolla/ubuntu-source-heat-engine:pike
        glance_api: docker.io/kolla/ubuntu-source-glance-api:pike
        glance_registry: docker.io/kolla/ubuntu-source-glance-registry:pike
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
      pull_policy: Always
    pod:
      user:
        glance:
          uid: 42415
    network:
      api:
        ingress:
          proxy_body_size: 102400M
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: glance
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: nova
data:
  chart_name: nova
  release: nova
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-nova
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: nova-bootstrap
          type: job
          labels:
            application: nova
            component: bootstrap
        - name: nova-cell-setup
          type: job
          labels:
            application: nova
            component: cell-setup
        - name: nova-db-init
          type: job
          labels:
            application: nova
            component: db-init
        - name: nova-db-sync
          type: job
          labels:
            application: nova
            component: db-sync
        - name: nova-ks-endpoints
          type: job
          labels:
            application: nova
            component: ks-endpoints
        - name: nova-ks-service
          type: job
          labels:
            application: nova
            component: ks-service
        - name: nova-ks-user
          type: job
          labels:
            application: nova
            component: ks-user
        - name: placement-ks-endpoints
          type: job
          labels:
            application: placement
            component: ks-endpoints
        - name: placement-ks-service
          type: job
          labels:
            application: placement
            component: ks-service
        - name: placement-ks-user
          type: job
          labels:
            application: placement
            component: ks-user
  values:
    images:
      tags:
        test: docker.io/kolla/ubuntu-source-rally:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_service: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_endpoints: docker.io/kolla/ubuntu-source-heat-engine:pike
        nova_api: docker.io/kolla/ubuntu-source-nova-api:pike
        nova_cell_setup: docker.io/kolla/ubuntu-source-nova-api:pike
        nova_compute: docker.io/kolla/ubuntu-source-nova-compute:pike
        nova_compute_ironic: docker.io/kolla/ubuntu-source-nova-compute-ironic:pike
        nova_compute_ssh: docker.io/kolla/ubuntu-source-nova-ssh:pike
        nova_conductor: docker.io/kolla/ubuntu-source-nova-conductor:pike
        nova_consoleauth: docker.io/kolla/ubuntu-source-nova-consoleauth:pike
        nova_db_sync: docker.io/kolla/ubuntu-source-nova-api:pike
        nova_novncproxy: docker.io/kolla/ubuntu-source-nova-novncproxy:pike
        nova_novncproxy_assets: docker.io/kolla/ubuntu-source-nova-novncproxy:pike
        nova_placement: docker.io/kolla/ubuntu-source-nova-placement-api:pike
        nova_scheduler: docker.io/kolla/ubuntu-source-nova-scheduler:pike
        nova_spiceproxy: docker.io/kolla/ubuntu-source-nova-spicehtml5proxy:pike
        nova_spiceproxy_assets: docker.io/kolla/ubuntu-source-nova-spicehtml5proxy:pike
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
      pull_policy: Always
    network:
      novncproxy:
        name: "nova-novncproxy"
        node_port:
          enabled: true
          port: 30608
        port: 6080
        targetPort: 6080
    conf:
      rootwrap_filters:
        api_metadata:
          override:
          append:
        compute:
          override: |
            # nova-rootwrap command filters for compute nodes
            # This file should be owned by (and only-writeable by) the root user
            [Filters]
            # nova/virt/disk/mount/api.py: 'kpartx', '-a', device
            # nova/virt/disk/mount/api.py: 'kpartx', '-d', device
            kpartx: CommandFilter, kpartx, root
            # nova/virt/xenapi/vm_utils.py: tune2fs, -O ^has_journal, part_path
            # nova/virt/xenapi/vm_utils.py: tune2fs, -j, partition_path
            tune2fs: CommandFilter, tune2fs, root
            # nova/virt/disk/mount/api.py: 'mount', mapped_device
            # nova/virt/disk/api.py: 'mount', '-o', 'bind', src, target
            # nova/virt/xenapi/vm_utils.py: 'mount', '-t', 'ext2,ext3,ext4,reiserfs'..
            # nova/virt/configdrive.py: 'mount', device, mountdir
            mount: CommandFilter, mount, root
            # nova/virt/disk/mount/api.py: 'umount', mapped_device
            # nova/virt/disk/api.py: 'umount' target
            # nova/virt/xenapi/vm_utils.py: 'umount', dev_path
            # nova/virt/configdrive.py: 'umount', mountdir
            umount: CommandFilter, umount, root
            # nova/virt/disk/mount/nbd.py: 'qemu-nbd', '-c', device, image
            # nova/virt/disk/mount/nbd.py: 'qemu-nbd', '-d', device
            qemu-nbd: CommandFilter, qemu-nbd, root
            # nova/virt/disk/mount/loop.py: 'losetup', '--find', '--show', image
            # nova/virt/disk/mount/loop.py: 'losetup', '--detach', device
            losetup: CommandFilter, losetup, root
            # nova/virt/disk/vfs/localfs.py: 'blkid', '-o', 'value', '-s', 'TYPE', device
            blkid: CommandFilter, blkid, root
            # nova/virt/libvirt/utils.py: 'blockdev', '--getsize64', path
            # nova/virt/disk/mount/nbd.py: 'blockdev', '--flushbufs', device
            blockdev: RegExpFilter, blockdev, root, blockdev, (--getsize64|--flushbufs), /dev/.*
            # nova/virt/disk/vfs/localfs.py: 'tee', canonpath
            # nova/virt/libvirt/guest.py: 'tee',
            # nova/virt/libvirt/vif.py: utils.execute('tee',
            tee: CommandFilter, tee, root
            # nova/virt/disk/vfs/localfs.py: 'mkdir', canonpath
            mkdir: CommandFilter, mkdir, root
            # nova/virt/disk/vfs/localfs.py: 'chown'
            # nova/virt/libvirt/utils.py: def chown(): execute('chown', owner, path,
            # nova/virt/libvirt/driver.py: 'chown', os.getuid( console_log
            # nova/virt/libvirt/driver.py: 'chown', os.getuid( console_log
            # nova/virt/libvirt/driver.py: 'chown', 'root', basepath('disk')
            chown: CommandFilter, chown, root
            # nova/virt/disk/vfs/localfs.py: 'chmod'
            chmod: CommandFilter, chmod, root
            # nova/virt/libvirt/vif.py: 'ip', 'tuntap', 'add', dev, 'mode', 'tap'
            # nova/virt/libvirt/vif.py: 'ip', 'link', 'set', dev, 'up'
            # nova/virt/libvirt/vif.py: 'ip', 'link', 'delete', dev
            # nova/network/linux_net.py: 'ip', 'addr', 'add', str(floating_ip)+'/32'i..
            # nova/network/linux_net.py: 'ip', 'addr', 'del', str(floating_ip)+'/32'..
            # nova/network/linux_net.py: 'ip', 'addr', 'add', '169.254.169.254/32',..
            # nova/network/linux_net.py: 'ip', 'addr', 'show', 'dev', dev, 'scope',..
            # nova/network/linux_net.py: 'ip', 'addr', 'del/add', ip_params, dev)
            # nova/network/linux_net.py: 'ip', 'addr', 'del', params, fields[-1]
            # nova/network/linux_net.py: 'ip', 'addr', 'add', params, bridge
            # nova/network/linux_net.py: 'ip', '-f', 'inet6', 'addr', 'change', ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', 'dev', dev, 'promisc',..
            # nova/network/linux_net.py: 'ip', 'link', 'add', 'link', bridge_if ...
            # nova/network/linux_net.py: 'ip', 'link', 'set', interface, address,..
            # nova/network/linux_net.py: 'ip', 'link', 'set', interface, 'up'
            # nova/network/linux_net.py: 'ip', 'link', 'set', bridge, 'up'
            # nova/network/linux_net.py: 'ip', 'addr', 'show', 'dev', interface, ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', dev, address, ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', dev, 'up'
            # nova/network/linux_net.py: 'ip', 'route', 'add', ..
            # nova/network/linux_net.py: 'ip', 'route', 'del', .
            # nova/network/linux_net.py: 'ip', 'route', 'show', 'dev', dev
            ip: CommandFilter, ip, root
            # nova/virt/libvirt/vif.py: 'tunctl', '-b', '-t', dev
            # nova/network/linux_net.py: 'tunctl', '-b', '-t', dev
            tunctl: CommandFilter, tunctl, root
            # nova/virt/libvirt/vif.py: 'ovs-vsctl', ...
            # nova/virt/libvirt/vif.py: 'ovs-vsctl', 'del-port', ...
            # nova/network/linux_net.py: 'ovs-vsctl', ....
            ovs-vsctl: CommandFilter, ovs-vsctl, root
            # nova/network/linux_net.py: 'ivs-ctl', ....
            ivs-ctl: CommandFilter, ivs-ctl, root
            # nova/virt/libvirt/vif.py: 'vrouter-port-control', ...
            vrouter-port-control: CommandFilter, vrouter-port-control, root
            # nova/virt/libvirt/vif.py: 'ebrctl', ...
            ebrctl: CommandFilter, ebrctl, root
            # nova/virt/libvirt/vif.py: 'mm-ctl', ...
            mm-ctl: CommandFilter, mm-ctl, root
            # nova/network/linux_net.py: 'ovs-ofctl', ....
            ovs-ofctl: CommandFilter, ovs-ofctl, root
            # nova/virt/libvirt/driver.py: 'dd', if=%s % virsh_output, ...
            dd: CommandFilter, dd, root
            # nova/virt/xenapi/volume_utils.py: 'iscsiadm', '-m', ...
            iscsiadm: CommandFilter, iscsiadm, root
            # nova/virt/libvirt/volume/aoe.py: 'aoe-revalidate', aoedev
            # nova/virt/libvirt/volume/aoe.py: 'aoe-discover'
            aoe-revalidate: CommandFilter, aoe-revalidate, root
            aoe-discover: CommandFilter, aoe-discover, root
            # nova/virt/xenapi/vm_utils.py: parted, --script, ...
            # nova/virt/xenapi/vm_utils.py: 'parted', '--script', dev_path, ..*.
            parted: CommandFilter, parted, root
            # nova/virt/xenapi/vm_utils.py: 'pygrub', '-qn', dev_path
            pygrub: CommandFilter, pygrub, root
            fdisk: CommandFilter, fdisk, root
            # nova/virt/disk/api.py: e2fsck, -f, -p, image
            e2fsck: CommandFilter, e2fsck, root
            # nova/virt/disk/api.py: resize2fs, image
            resize2fs: CommandFilter, resize2fs, root
            iptables-save: CommandFilter, iptables-save, root
            ip6tables-save: CommandFilter, ip6tables-save, root
            # nova/network/linux_net.py: 'ip[6]tables-restore' % (cmd,)
            iptables-restore: CommandFilter, iptables-restore, root
            ip6tables-restore: CommandFilter, ip6tables-restore, root
            # nova/network/linux_net.py: 'arping', '-U', floating_ip, '-A', '-I', ...
            # nova/network/linux_net.py: 'arping', '-U', network_ref['dhcp_server'],..
            arping: CommandFilter, arping, root
            # nova/network/linux_net.py: 'dhcp_release', dev, address, mac_address
            dhcp_release: CommandFilter, dhcp_release, root
            # nova/network/linux_net.py: 'kill', '-9', pid
            # nova/network/linux_net.py: 'kill', '-HUP', pid
            kill_dnsmasq: KillFilter, root, /usr/sbin/dnsmasq, -9, -HUP
            # nova/network/linux_net.py: 'kill', pid
            kill_radvd: KillFilter, root, /usr/sbin/radvd
            # nova/network/linux_net.py: dnsmasq call
            dnsmasq: EnvFilter, env, root, CONFIG_FILE=, NETWORK_ID=, dnsmasq
            # nova/network/linux_net.py: 'radvd', '-C', '%s' % _ra_file(dev, 'conf'..
            radvd: CommandFilter, radvd, root
            # nova/network/linux_net.py: 'brctl', 'addbr', bridge
            # nova/network/linux_net.py: 'brctl', 'setfd', bridge, 0
            # nova/network/linux_net.py: 'brctl', 'stp', bridge, 'off'
            # nova/network/linux_net.py: 'brctl', 'addif', bridge, interface
            brctl: CommandFilter, brctl, root
            # nova/virt/libvirt/utils.py: 'mkswap'
            # nova/virt/xenapi/vm_utils.py: 'mkswap'
            mkswap: CommandFilter, mkswap, root
            # nova/virt/libvirt/utils.py: 'nova-idmapshift'
            nova-idmapshift: CommandFilter, nova-idmapshift, root
            # nova/virt/xenapi/vm_utils.py: 'mkfs'
            # nova/utils.py: 'mkfs', fs, path, label
            mkfs: CommandFilter, mkfs, root
            # nova/virt/libvirt/utils.py: 'qemu-img'
            qemu-img: CommandFilter, qemu-img, root
            # nova/virt/disk/vfs/localfs.py: 'readlink', '-e'
            readlink: CommandFilter, readlink, root
            # nova/virt/disk/api.py:
            mkfs.ext3: CommandFilter, mkfs.ext3, root
            mkfs.ext4: CommandFilter, mkfs.ext4, root
            mkfs.ntfs: CommandFilter, mkfs.ntfs, root
            # nova/virt/libvirt/driver.py:
            lvremove: CommandFilter, lvremove, root
            # nova/virt/libvirt/utils.py:
            lvcreate: CommandFilter, lvcreate, root
            # nova/virt/libvirt/utils.py:
            lvs: CommandFilter, lvs, root
            # nova/virt/libvirt/utils.py:
            vgs: CommandFilter, vgs, root
            # nova/utils.py: read_file_as_root: 'cat', file_path
            # (called from nova/virt/disk/vfs/localfs.py:VFSLocalFS.read_file)
            read_passwd: RegExpFilter, cat, root, cat, (/var|/usr)?/tmp/openstack-vfs-localfs[^/]+/etc/passwd
            read_shadow: RegExpFilter, cat, root, cat, (/var|/usr)?/tmp/openstack-vfs-localfs[^/]+/etc/shadow
            # os-brick needed commands
            read_initiator: ReadFileFilter, /etc/iscsi/initiatorname.iscsi
            multipath: CommandFilter, multipath, root
            # multipathd show status
            multipathd: CommandFilter, multipathd, root
            systool: CommandFilter, systool, root
            vgc-cluster: CommandFilter, vgc-cluster, root
            # os_brick/initiator/connector.py
            drv_cfg: CommandFilter, /opt/emc/scaleio/sdc/bin/drv_cfg, root, /opt/emc/scaleio/sdc/bin/drv_cfg, --query_guid
            # TODO(smcginnis) Temporary fix.
            # Need to pull in os-brick os-brick.filters file instead and clean
            # out stale brick values from this file.
            scsi_id: CommandFilter, /lib/udev/scsi_id, root
            # os_brick.privileged.default oslo.privsep context
            # This line ties the superuser privs with the config files, context name,
            # and (implicitly) the actual python code invoked.
            privsep-rootwrap: RegExpFilter, privsep-helper, root, privsep-helper, --config-file, /etc/(?!\.\.).*, --privsep_context, os_brick.privileged.default, --privsep_sock_path, /tmp/.*
            # nova/virt/libvirt/storage/dmcrypt.py:
            cryptsetup: CommandFilter, cryptsetup, root
            # nova/virt/xenapi/vm_utils.py:
            xenstore-read: CommandFilter, xenstore-read, root
            # nova/virt/libvirt/utils.py:
            rbd: CommandFilter, rbd, root
            # nova/virt/libvirt/utils.py: 'shred', '-n3', '-s%d' % volume_size, path
            shred: CommandFilter, shred, root
            # nova/virt/libvirt/volume/volume.py: 'cp', '/dev/stdin', delete_control..
            cp: CommandFilter, cp, root
            # nova/virt/xenapi/vm_utils.py:
            sync: CommandFilter, sync, root
            # nova/virt/libvirt/imagebackend.py:
            ploop: RegExpFilter, ploop, root, ploop, restore-descriptor, .*
            prl_disk_tool: RegExpFilter, prl_disk_tool, root, prl_disk_tool, resize, --size, .*M$, --resize_partition, --hdd, .*
            # nova/virt/libvirt/utils.py:
            ploop: RegExpFilter, ploop, root, ploop, init, -s, .*, -f, .*, -t, .*, .*
            # nova/virt/libvirt/utils.py: 'xend', 'status'
            xend: CommandFilter, xend, root
            # nova/virt/libvirt/utils.py:
            touch: CommandFilter, touch, root
            # nova/virt/libvirt/volume/vzstorage.py
            pstorage-mount: CommandFilter, pstorage-mount, root
          append:
        network:
          override:
          append:
      nova:
        DEFAULT:
          scheduler_default_filters: "RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter"
          debug: true
        vnc:
          vncserver_proxyclient_address: taco-aio
          novncproxy_base_url: http://taco-aio:30608/vnc_auto.html
        scheduler:
          discover_hosts_in_cells_interval: 60
        libvirt:
          virt_type: "qemu"
    endpoints:
      oslo_db_cell0:
        path: /nova_cell0
    pod:
      user:
        nova:
          uid: 42436
      replicas:
        api_metadata: 1
        osapi: 1
        conductor: 1
        consoleauth: 1
        scheduler: 1
        novncproxy: 1
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: nova
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: neutron
data:
  chart_name: neutron
  release: neutron
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-neutron
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: neutron-db-init
          type: job
          labels:
            application: neutron
            component: db-init
        - name: neutron-db-sync
          type: job
          labels:
            application: neutron
            component: db-sync
        - name: neutron-ks-endpoints
          type: job
          labels:
            application: neutron
            component: ks-endpoints
        - name: neutron-ks-service
          type: job
          labels:
            application: neutron
            component: ks-service
        - name: neutron-ks-user
          type: job
          labels:
            application: neutron
            component: ks-user
  values:
    images:
      tags:
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        neutron_db_sync: docker.io/kolla/ubuntu-source-neutron-server:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-kolla-toolbox:pike
        ks_service: docker.io/kolla/ubuntu-source-kolla-toolbox:pike
        ks_endpoints: docker.io/kolla/ubuntu-source-kolla-toolbox:pike
        neutron_server: docker.io/kolla/ubuntu-source-neutron-server:pike
        neutron_dhcp: docker.io/kolla/ubuntu-source-neutron-dhcp-agent:pike
        neutron_metadata: docker.io/kolla/ubuntu-source-neutron-metadata-agent:pike
        neutron_l3: docker.io/kolla/ubuntu-source-neutron-l3-agent:pike
        neutron_openvswitch_agent: docker.io/kolla/ubuntu-source-neutron-openvswitch-agent:pike
        neutron_linuxbridge_agent: docker.io/kolla/ubuntu-source-neutron-linuxbridge-agent:pike
      pull_policy: Always
    labels:
      agent:
        metadata:
          # use config drive for medata service
          node_selector_value: "disabled"
    pod:
      user:
        neutron:
          uid: 42435
    conf:
      rootwrap_filters:
        debug:
          override:
          append:
        dibbler:
          override:
          append: |
            # prefix_delegation_agent
            kill_dibbler-client: KillFilter, root, dibbler-client, -9
        ipset_firewall:
          override:
          append:
        l3:
          override:
          append: |
            # haproxy
            haproxy: RegExpFilter, haproxy, root, haproxy, -f, .*
            kill_haproxy: KillFilter, root, haproxy, -15, -9, -HUP
            kill_metadata35: KillFilter, root, python3.5, -15, -9
        netns_cleanup:
          override:
          append:
        dhcp:
          override:
          append: |
            # haproxy
            haproxy: RegExpFilter, haproxy, root, haproxy, -f, .*
            kill_haproxy: KillFilter, root, haproxy, -15, -9, -HUP
            kill_metadata35: KillFilter, root, python3.5, -9
        ebtables:
          override:
          append:
        iptables_firewall:
          override:
          append:
        linuxbridge_plugin:
          override:
          append:
        openvswitch_plugin:
          override:
          append: |
            # needed for FDB extension
            bridge: CommandFilter, bridge, root
      neutron_sudoers:
        override: |
          # This sudoers file supports rootwrap and rootwrap-daemon for both Kolla and LOCI Images.
          Defaults !requiretty
          Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/var/lib/openstack/bin:/var/lib/kolla/venv/bin"
          neutron ALL = (root) NOPASSWD: /var/lib/kolla/venv/bin/neutron-rootwrap /etc/neutron/rootwrap.conf *, /var/lib/openstack/bin/neutron-rootwrap /etc/neutron/rootwrap.conf *, /var/lib/kolla/venv/bin/neutron-rootwrap-daemon /etc/neutron/rootwrap.conf, /var/lib/openstack/bin/neutron-rootwrap-daemon /etc/neutron/rootwrap.conf
      neutron:
        DEFAULT:
          core_plugin: ml2
          service_plugins: router
          l3_ha: False
          interface_driver: openvswitch
        agent:
          root_helper: sudo neutron-rootwrap /etc/neutron/rootwrap.conf
          root_helper_daemon: sudo neutron-rootwrap-daemon /etc/neutron/rootwrap.conf
      plugins:
        ml2_conf:
          ml2:
            mechanism_drivers: openvswitch,l2population
            type_drivers: flat, vxlan
            tenant_network_types: vxlan
        openvswitch_agent:
          agent:
            tunnel_types: vxlan
          ovs:
            bridge_mappings: external:br-ex
          securitygroup:
            # use iptables_hybrid for kernel versions lower than 4.3
            firewall_driver: openvswitch
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: neutron
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: cinder
data:
  chart_name: cinder
  release: cinder
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-cinder
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: cinder-bootstrap
          type: job
          labels:
            application: cinder
            component: bootstrap
        - name: cinder-db-init
          type: job
          labels:
            application: cinder
            component: db-init
        - name: cinder-db-sync
          type: job
          labels:
            application: cinder
            component: db-sync
        - name: cinder-ks-endpoints
          type: job
          labels:
            application: cinder
            component: ks-endpoints
        - name: cinder-ks-service
          type: job
          labels:
            application: cinder
            component: ks-service
        - name: cinder-ks-user
          type: job
          labels:
            application: cinder
            component: ks-user
  values:
    conf:
      cinder:
        DEFAULT:
          debug: true
    images:
      tags:
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        cinder_db_sync: docker.io/kolla/ubuntu-source-cinder-api:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_service: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_endpoints: docker.io/kolla/ubuntu-source-heat-engine:pike
        cinder_api: docker.io/kolla/ubuntu-source-cinder-api:pike
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
        cinder_scheduler: docker.io/kolla/ubuntu-source-cinder-scheduler:pike
        cinder_volume: docker.io/kolla/ubuntu-source-cinder-volume:pike
        cinder_volume_usage_audit: docker.io/kolla/ubuntu-source-cinder-volume:pike
        cinder_backup: docker.io/kolla/ubuntu-source-cinder-backup:pike
      pull_policy: Always
    pod:
      user:
        cinder:
          uid: 42407
      replicas:
        api: 1
        backup: 1
        scheduler: 1
        volume: 1
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: cinder
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: heat
data:
  chart_name: heat
  release: heat
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-heat
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        bootstrap: docker.io/kolla/ubuntu-source-heat-engine:pike
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        heat_db_sync: docker.io/kolla/ubuntu-source-heat-api:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_user: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_service: docker.io/kolla/ubuntu-source-heat-engine:pike
        ks_endpoints: docker.io/kolla/ubuntu-source-heat-engine:pike
        heat_api: docker.io/kolla/ubuntu-source-heat-api:pike
        heat_cfn: docker.io/kolla/ubuntu-source-heat-api:pike
        heat_cloudwatch: docker.io/kolla/ubuntu-source-heat-api:pike
        heat_engine: docker.io/kolla/ubuntu-source-heat-engine:pike
        heat_engine_cleaner: docker.io/kolla/ubuntu-source-heat-engine:pike
      pull_policy: Always
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: heat
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: horizon
data:
  chart_name: horizon
  release: horizon
  namespace: openstack
  timeout: 3600
  wait:
    timeout: 3600
    labels:
      release_group: taco-horizon
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        db_init: docker.io/kolla/ubuntu-source-heat-engine:pike
        horizon_db_sync: docker.io/kolla/ubuntu-source-horizon:pike
        db_drop: docker.io/kolla/ubuntu-source-heat-engine:pike
        horizon: docker.io/kolla/ubuntu-source-horizon:pike
      pull_policy: Always
    pod:
      replicas:
        server: 1
    local_settings:
      openstack_neutron_network:
        enable_router: "True"
        enable_quotas: "True"
        enable_ipv6: "False"
        enable_distributed_router: "False"
        enable_ha_router: "True"
        enable_lb: "True"
        enable_firewall: "False"
        enable_vpn: "False"
        enable_fip_topology_check: "True"
  source:
    type: git
    location: https://github.com/sktelecom-oslab/openstack-helm
    subpath: horizon
    reference: 2.2.0
  dependencies:
    - helm-toolkit
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: infra-services
data:
  description: "Openstack Infra Services"
  sequenced: True
  chart_group:
    - ceph
    - ceph-openstack-config
    - ingress
    - etcd
    - rabbitmq
    - memcached
    - mariadb
    - libvirt
    - openvswitch
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-services
data:
  description: "Openstack Services"
  sequenced: False
  chart_group:
    - keystone
    - glance
    - nova
    - neutron
    - cinder
    - horizon
---
schema: armada/Manifest/v1
metadata:
  schema: metadata/Document/v1
  name: taco-manifest
data:
  release_prefix: taco
  chart_groups:
    - infra-services
    - openstack-services
